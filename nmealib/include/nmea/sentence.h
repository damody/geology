/*
 *
 * NMEA library
 * URL: http://nmea.sourceforge.net
 * Author: Tim (xtimor@gmail.com)
 * Licence: http://www.gnu.org/licenses/lgpl.html
 * $Id: sentence.h 17 2008-03-11 11:56:11Z xtimor $
 *
 */

/*! \file */

#ifndef __NMEA_SENTENCE_H__
#define __NMEA_SENTENCE_H__

#include "info.h"

#ifdef  __cplusplus
extern "C" {
#endif

#define NEMA_STRUCT_START(x) typedef struct _nmea##x 
#define NEMA_STRUCT_END(x)  nmea##x;


/**
 * NMEA packets type which parsed and generated by library
 */
enum nmeaPACKTYPE
{
	GPNON   = 0x00000000,   /**< Unknown packet type. */
	GPGGA   = 0x00000001,   /**< GGA - Essential fix data which provide 3D location and accuracy data. */
	GPGSA   = 0x00000002,   /**< GSA - GPS receiver operating mode, SVs used for navigation, and DOP values. */
	GPGSV   = 0x00000004,   /**< GSV - Number of SVs in view, PRN numbers, elevation, azimuth & SNR values. */
	GPRMC   = 0x00000008,   /**< RMC - Recommended Minimum Specific GPS/TRANSIT Data. */
	GPVTG   = 0x00000010,   /**< VTG - Actual track made good and speed over ground. */
	GPAAM   = 0x00000020,    
	GPBOD   = 0x00000040,   
	GPBWW   = 0x00000080,   
	GPGLL   = 0x00000100,   
	GPMSK   = 0x00000200,   
	PGRME   = 0x00000400,   

	SDDBK   = 0x00000800,   
	SDDBS   = 0x00001000,   
	SDDBT   = 0x00002000,   
	SDDPT   = 0x00004000,   
	SDMTW   = 0x00008000,   
	WIMWV   = 0x00010000,   
	PGRMM   = 0x00020000,   
	PGRMZ   = 0x00040000,  
};

typedef struct _nmeahead
{
	char	name[6];
	int	typevalue;
} nmeahead;

extern const nmeahead g_nmeaheads[];
#define NMEA_TYPE_TOTAL 19
extern const int g_TypeTotal;
/**
 * GGA packet information structure (Global Positioning System Fix Data)
 */

NEMA_STRUCT_START(GPGGA)
{
	nmeaTIME utc;       /**< 1. UTC of position (just time) */
	double  lat;        /**< 2. Latitude in NDEG - [degree][min].[sec/60] */
	char    ns;         /**< 3. [N]orth or [S]outh */
	double  lon;        /**< 4. Longitude in NDEG - [degree][min].[sec/60] */
	char    ew;         /**< 5. [E]ast or [W]est */
	int     sig;        /**< 6. GPS quality indicator (0 = Invalid; 1 = Fix; 2 = Differential, 3 = Sensitive) */
	int     satinuse;   /**< 7. Number of satellites in use (not those in view) */
	double  HDOP;       /**< 8. Horizontal dilution of precision */
	double  elv;        /**< 9. Antenna altitude above/below mean sea level (geoid) */
	char    elv_units;  /**< 10. [M]eters (Antenna height unit) */
	double  diff;       /**< 11. Geoidal separation (Diff. between WGS-84 earth ellipsoid and mean sea level. '-' = geoid is below WGS-84 ellipsoid) */
	char    diff_units; /**< 12. [M]eters (Units of geoidal separation) */
	double  dgps_age;   /**< 13. Time in seconds since last DGPS update */
	int     dgps_sid;   /**< 14. DGPS station ID number */
}
NEMA_STRUCT_END(GPGGA)

/**
* GSA packet information structure (Satellite status)
*/
NEMA_STRUCT_START(GPGSA)
{
	char    fix_mode;   /**< 1. Mode (M = Manual, forced to operate in 2D or 3D; A = Automatic, 3D/2D) */
	int     fix_type;   /**< 2. Type, used for navigation (1 = Fix not available; 2 = 2D; 3 = 3D) */
	int     sat_prn[NMEA_MAXSAT]; /**< 3. PRNs of satellites used in position fix (null for unused fields) */
	double  PDOP;       /**< 4. Dilution of precision */
	double  HDOP;       /**< 5. Horizontal dilution of precision */
	double  VDOP;       /**< 6. Vertical dilution of precision */
}
NEMA_STRUCT_END(GPGSA)

/**
* GSV packet information structure (Satellites in view)
*/
NEMA_STRUCT_START(GPGSV)
{
	int     pack_count; /**< Total number of messages of this type in this cycle */
	int     pack_index; /**< Message number */
	int     sat_count;  /**< Total number of satellites in view */
	nmeaSATELLITE sat_data[NMEA_SATINPACK];
}
NEMA_STRUCT_END(GPGSV)

/**
* RMC packet information structure (Recommended Minimum sentence C)
*/
NEMA_STRUCT_START(GPRMC)
{
	nmeaTIME utc;       /**< UTC of position */
	char    status;     /**< Status (A = active or V = void) */
	double  lat;        /**< Latitude in NDEG - [degree][min].[sec/60] */
	char    ns;         /**< [N]orth or [S]outh */
	double  lon;        /**< Longitude in NDEG - [degree][min].[sec/60] */
	char    ew;         /**< [E]ast or [W]est */
	double  speed;      /**< Speed over the ground in knots */
	double  direction;  /**< Track angle in degrees True */
	double  declination; /**< Magnetic variation degrees (Easterly var. subtracts from true course) */
	char    declin_ew;  /**< [E]ast or [W]est */
	char    mode;       /**< Mode indicator of fix type (A = autonomous, D = differential, E = estimated, N = not valid, S = simulator) */
}
NEMA_STRUCT_END(GPRMC)

/**
* VTG packet information structure (Track made good and ground speed)
*/
NEMA_STRUCT_START(GPVTG)
{
	double  dir;        /**< True track made good (degrees) */
	char    dir_t;      /**< Fixed text 'T' indicates that track made good is relative to true north */
	double  dec;        /**< Magnetic track made good */
	char    dec_m;      /**< Fixed text 'M' */
	double  spn;        /**< Ground speed, knots */
	char    spn_n;      /**< Fixed text 'N' indicates that speed over ground is in knots */
	double  spk;        /**< Ground speed, kilometers per hour */
	char    spk_k;      /**< Fixed text 'K' indicates that speed over ground is in kilometers/hour */
}
NEMA_STRUCT_END(GPVTG)


/** reference http://www.eye4software.com/products/gpstoolkit/nmea/ */
NEMA_STRUCT_START(GPAAM)
{
	char	status1;	/**< Status, arrival circle entered, A = active, V = void */
	char	status2;	/**< Status, perpendicular passes at waypoint, A = active, V = void */
	double	radius;		/**< Arrival circle radius */
	char	units_n;	/**< Units: N = Nautical Miles */
	char	wayName[8];	/**< Waypoint Name */
}
NEMA_STRUCT_END(GPAAM)
/**<  */
NEMA_STRUCT_START(GPBOD)
{
	double	degT;		/**< 1. Bearing in degrees */
	char	Bearing_T;	/**< 2. T = True Bearing, M = Magnetic Bearing */
	double	degM;		/**< 3. Bearing in degrees */
	char	Bearing_M;	/**< 4. T = True Bearing, M = Magnetic Bearing */
	char	toWay[16];	/**< 5. TO Waypoint */
	char	fromWay[16];	/**< 6. FROM Waypoint */
}
NEMA_STRUCT_END(GPBOD)
typedef nmeaGPBOD nmeaGPBWW;

NEMA_STRUCT_START(GPGLL)
{
	double	lat;		/**< 1. Latitude in NDEG - [degree][min].[sec/60] */
	char	ns;		/**< 2. [N]orth or [S]outh */
	double  lon;		/**< 4. Longitude in NDEG - [degree][min].[sec/60] */
	char    ew;		/**< 5. [E]ast or [W]est */
	nmeaTIME utc;		/**< 6. UTC of position (just time) */
	char	av;		/**< 7. Status, data valid (A) or data invalid (V) */
}
NEMA_STRUCT_END(GPGLL)

NEMA_STRUCT_START(GPMSK)
{
	double	degT;
}
NEMA_STRUCT_END(GPMSK)

NEMA_STRUCT_START(PGRME)
{
	double	degT;
}
NEMA_STRUCT_END(PGRME)

NEMA_STRUCT_START(SDDBT)
{
	double depth_f;		/**<  */
	char uints_f;		/**<  */
	double depth_M;		/**<  */
	char uints_M;		/**<  */
	double depth_F;		/**<  */
	char uints_F;		/**<  */
}
NEMA_STRUCT_END(SDDBT)
typedef nmeaSDDBT nmeaSDDBK;
typedef nmeaSDDBT nmeaSDDBS;

NEMA_STRUCT_START(SDDPT)
{
	double	Depth;		/**<  */
	double	Offset;		/**<  */
}
NEMA_STRUCT_END(SDDPT)

NEMA_STRUCT_START(SDMTW)
{
	double	degT;
}
NEMA_STRUCT_END(SDMTW)

NEMA_STRUCT_START(WIMWV)
{
	double	degT;
}
NEMA_STRUCT_END(WIMWV)

NEMA_STRUCT_START(PGRMM)
{
	double	degT;
}
NEMA_STRUCT_END(PGRMM)

NEMA_STRUCT_START(PGRMZ)
{
	double	degT;
}
NEMA_STRUCT_END(PGRMZ)

void nmea_zero_GPGGA(nmeaGPGGA *pack);
void nmea_zero_GPGSA(nmeaGPGSA *pack);
void nmea_zero_GPGSV(nmeaGPGSV *pack);
void nmea_zero_GPRMC(nmeaGPRMC *pack);
void nmea_zero_GPVTG(nmeaGPVTG *pack);
void nmea_zero_SDDBT(nmeaSDDBT *pack);

#ifdef  __cplusplus
}
#endif

#endif /* __NMEA_SENTENCE_H__ */
